// Code generated by Kitex v0.7.2. DO NOT EDIT.

package chooseservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	choose "sign/kitex_gen/sign/choose"
)

func serviceInfo() *kitex.ServiceInfo {
	return chooseServiceServiceInfo
}

var chooseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChooseService"
	handlerType := (*choose.ChooseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Choose": kitex.NewMethodInfo(chooseHandler, newChooseServiceChooseArgs, newChooseServiceChooseResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "choose",
		"ServiceFilePath": `idl/choose.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func chooseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*choose.ChooseServiceChooseArgs)
	realResult := result.(*choose.ChooseServiceChooseResult)
	success, err := handler.(choose.ChooseService).Choose(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChooseServiceChooseArgs() interface{} {
	return choose.NewChooseServiceChooseArgs()
}

func newChooseServiceChooseResult() interface{} {
	return choose.NewChooseServiceChooseResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Choose(ctx context.Context, req *choose.Empty) (r *choose.Empty, err error) {
	var _args choose.ChooseServiceChooseArgs
	_args.Req = req
	var _result choose.ChooseServiceChooseResult
	if err = p.c.Call(ctx, "Choose", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
