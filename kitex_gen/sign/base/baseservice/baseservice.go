// Code generated by Kitex v0.7.2. DO NOT EDIT.

package baseservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "sign/kitex_gen/sign/base"
)

func serviceInfo() *kitex.ServiceInfo {
	return baseServiceServiceInfo
}

var baseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BaseService"
	handlerType := (*base.BaseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":     kitex.NewMethodInfo(registerHandler, newBaseServiceRegisterArgs, newBaseServiceRegisterResult, false),
		"Login":        kitex.NewMethodInfo(loginHandler, newBaseServiceLoginArgs, newBaseServiceLoginResult, false),
		"Join":         kitex.NewMethodInfo(joinHandler, newBaseServiceJoinArgs, newBaseServiceJoinResult, false),
		"CreateGroup":  kitex.NewMethodInfo(createGroupHandler, newBaseServiceCreateGroupArgs, newBaseServiceCreateGroupResult, false),
		"Sign":         kitex.NewMethodInfo(signHandler, newBaseServiceSignArgs, newBaseServiceSignResult, false),
		"SignMonth":    kitex.NewMethodInfo(signMonthHandler, newBaseServiceSignMonthArgs, newBaseServiceSignMonthResult, false),
		"Choose":       kitex.NewMethodInfo(chooseHandler, newBaseServiceChooseArgs, newBaseServiceChooseResult, false),
		"ChooseSubmit": kitex.NewMethodInfo(chooseSubmitHandler, newBaseServiceChooseSubmitArgs, newBaseServiceChooseSubmitResult, false),
		"AddActivity":  kitex.NewMethodInfo(addActivityHandler, newBaseServiceAddActivityArgs, newBaseServiceAddActivityResult, false),
		"AddPrize":     kitex.NewMethodInfo(addPrizeHandler, newBaseServiceAddPrizeArgs, newBaseServiceAddPrizeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "base",
		"ServiceFilePath": `idl/base.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceRegisterArgs)
	realResult := result.(*base.BaseServiceRegisterResult)
	success, err := handler.(base.BaseService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceRegisterArgs() interface{} {
	return base.NewBaseServiceRegisterArgs()
}

func newBaseServiceRegisterResult() interface{} {
	return base.NewBaseServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceLoginArgs)
	realResult := result.(*base.BaseServiceLoginResult)
	success, err := handler.(base.BaseService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceLoginArgs() interface{} {
	return base.NewBaseServiceLoginArgs()
}

func newBaseServiceLoginResult() interface{} {
	return base.NewBaseServiceLoginResult()
}

func joinHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceJoinArgs)
	realResult := result.(*base.BaseServiceJoinResult)
	success, err := handler.(base.BaseService).Join(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceJoinArgs() interface{} {
	return base.NewBaseServiceJoinArgs()
}

func newBaseServiceJoinResult() interface{} {
	return base.NewBaseServiceJoinResult()
}

func createGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceCreateGroupArgs)
	realResult := result.(*base.BaseServiceCreateGroupResult)
	success, err := handler.(base.BaseService).CreateGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceCreateGroupArgs() interface{} {
	return base.NewBaseServiceCreateGroupArgs()
}

func newBaseServiceCreateGroupResult() interface{} {
	return base.NewBaseServiceCreateGroupResult()
}

func signHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceSignArgs)
	realResult := result.(*base.BaseServiceSignResult)
	success, err := handler.(base.BaseService).Sign(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceSignArgs() interface{} {
	return base.NewBaseServiceSignArgs()
}

func newBaseServiceSignResult() interface{} {
	return base.NewBaseServiceSignResult()
}

func signMonthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceSignMonthArgs)
	realResult := result.(*base.BaseServiceSignMonthResult)
	success, err := handler.(base.BaseService).SignMonth(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceSignMonthArgs() interface{} {
	return base.NewBaseServiceSignMonthArgs()
}

func newBaseServiceSignMonthResult() interface{} {
	return base.NewBaseServiceSignMonthResult()
}

func chooseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceChooseArgs)
	realResult := result.(*base.BaseServiceChooseResult)
	success, err := handler.(base.BaseService).Choose(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceChooseArgs() interface{} {
	return base.NewBaseServiceChooseArgs()
}

func newBaseServiceChooseResult() interface{} {
	return base.NewBaseServiceChooseResult()
}

func chooseSubmitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceChooseSubmitArgs)
	realResult := result.(*base.BaseServiceChooseSubmitResult)
	success, err := handler.(base.BaseService).ChooseSubmit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceChooseSubmitArgs() interface{} {
	return base.NewBaseServiceChooseSubmitArgs()
}

func newBaseServiceChooseSubmitResult() interface{} {
	return base.NewBaseServiceChooseSubmitResult()
}

func addActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceAddActivityArgs)
	realResult := result.(*base.BaseServiceAddActivityResult)
	success, err := handler.(base.BaseService).AddActivity(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceAddActivityArgs() interface{} {
	return base.NewBaseServiceAddActivityArgs()
}

func newBaseServiceAddActivityResult() interface{} {
	return base.NewBaseServiceAddActivityResult()
}

func addPrizeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceAddPrizeArgs)
	realResult := result.(*base.BaseServiceAddPrizeResult)
	success, err := handler.(base.BaseService).AddPrize(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceAddPrizeArgs() interface{} {
	return base.NewBaseServiceAddPrizeArgs()
}

func newBaseServiceAddPrizeResult() interface{} {
	return base.NewBaseServiceAddPrizeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *base.UserInfo) (r *base.BaseResp, err error) {
	var _args base.BaseServiceRegisterArgs
	_args.Req = req
	var _result base.BaseServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *base.UserInfo) (r *base.LoginResp, err error) {
	var _args base.BaseServiceLoginArgs
	_args.Req = req
	var _result base.BaseServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Join(ctx context.Context, req *base.JoinReq) (r *base.BaseResp, err error) {
	var _args base.BaseServiceJoinArgs
	_args.Req = req
	var _result base.BaseServiceJoinResult
	if err = p.c.Call(ctx, "Join", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateGroup(ctx context.Context, req *base.GroupInfo) (r *base.BaseResp, err error) {
	var _args base.BaseServiceCreateGroupArgs
	_args.Req = req
	var _result base.BaseServiceCreateGroupResult
	if err = p.c.Call(ctx, "CreateGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sign(ctx context.Context, req *base.SignReq) (r *base.BaseResp, err error) {
	var _args base.BaseServiceSignArgs
	_args.Req = req
	var _result base.BaseServiceSignResult
	if err = p.c.Call(ctx, "Sign", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignMonth(ctx context.Context, req *base.MonthSignReq) (r *base.MonthSignResp, err error) {
	var _args base.BaseServiceSignMonthArgs
	_args.Req = req
	var _result base.BaseServiceSignMonthResult
	if err = p.c.Call(ctx, "SignMonth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Choose(ctx context.Context, req *base.ChooseReq) (r *base.ChooseResp, err error) {
	var _args base.BaseServiceChooseArgs
	_args.Req = req
	var _result base.BaseServiceChooseResult
	if err = p.c.Call(ctx, "Choose", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChooseSubmit(ctx context.Context, req *base.ChooseSubmitReq) (r *base.ChooseSubmitResp, err error) {
	var _args base.BaseServiceChooseSubmitArgs
	_args.Req = req
	var _result base.BaseServiceChooseSubmitResult
	if err = p.c.Call(ctx, "ChooseSubmit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddActivity(ctx context.Context, req *base.ActicityInfo) (r *base.BaseResp, err error) {
	var _args base.BaseServiceAddActivityArgs
	_args.Req = req
	var _result base.BaseServiceAddActivityResult
	if err = p.c.Call(ctx, "AddActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddPrize(ctx context.Context, req *base.PrizeInfo) (r *base.BaseResp, err error) {
	var _args base.BaseServiceAddPrizeArgs
	_args.Req = req
	var _result base.BaseServiceAddPrizeResult
	if err = p.c.Call(ctx, "AddPrize", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
