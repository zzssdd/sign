// Code generated by Kitex v0.7.2. DO NOT EDIT.

package baseservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	base "sign/kitex_gen/sign/base"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, req *base.UserInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	Login(ctx context.Context, req *base.UserInfo, callOptions ...callopt.Option) (r *base.LoginResp, err error)
	Join(ctx context.Context, req *base.JoinReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	CreateGroup(ctx context.Context, req *base.GroupInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	Sign(ctx context.Context, req *base.SignReq, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	SignMonth(ctx context.Context, req *base.MonthSignReq, callOptions ...callopt.Option) (r *base.MonthSignResp, err error)
	Choose(ctx context.Context, req *base.ChooseReq, callOptions ...callopt.Option) (r *base.ChooseResp, err error)
	ChooseSubmit(ctx context.Context, req *base.ChooseSubmitReq, callOptions ...callopt.Option) (r *base.ChooseSubmitResp, err error)
	AddActivity(ctx context.Context, req *base.ActicityInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error)
	AddPrize(ctx context.Context, req *base.PrizeInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kBaseServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBaseServiceClient struct {
	*kClient
}

func (p *kBaseServiceClient) Register(ctx context.Context, req *base.UserInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kBaseServiceClient) Login(ctx context.Context, req *base.UserInfo, callOptions ...callopt.Option) (r *base.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kBaseServiceClient) Join(ctx context.Context, req *base.JoinReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Join(ctx, req)
}

func (p *kBaseServiceClient) CreateGroup(ctx context.Context, req *base.GroupInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateGroup(ctx, req)
}

func (p *kBaseServiceClient) Sign(ctx context.Context, req *base.SignReq, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Sign(ctx, req)
}

func (p *kBaseServiceClient) SignMonth(ctx context.Context, req *base.MonthSignReq, callOptions ...callopt.Option) (r *base.MonthSignResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SignMonth(ctx, req)
}

func (p *kBaseServiceClient) Choose(ctx context.Context, req *base.ChooseReq, callOptions ...callopt.Option) (r *base.ChooseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Choose(ctx, req)
}

func (p *kBaseServiceClient) ChooseSubmit(ctx context.Context, req *base.ChooseSubmitReq, callOptions ...callopt.Option) (r *base.ChooseSubmitResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChooseSubmit(ctx, req)
}

func (p *kBaseServiceClient) AddActivity(ctx context.Context, req *base.ActicityInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddActivity(ctx, req)
}

func (p *kBaseServiceClient) AddPrize(ctx context.Context, req *base.PrizeInfo, callOptions ...callopt.Option) (r *base.BaseResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddPrize(ctx, req)
}
