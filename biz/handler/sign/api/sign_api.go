// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "sign/api"
	base "sign/base"
)

// Register .
// @router /register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.UserInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.UserInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.LoginResp)

	c.JSON(consts.StatusOK, resp)
}

// Join .
// @router /join [POST]
func Join(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.JoinReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateGroup .
// @router /group [POST]
func CreateGroup(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GroupInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// Sign .
// @router /join [POST]
func Sign(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SignReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// SignMonth .
// @router /signMonth [GET]
func SignMonth(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MonthSignReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.MonthSignResp)

	c.JSON(consts.StatusOK, resp)
}

// Choose .
// @router /choose [GET]
func Choose(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ChooseReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.ChooseResp)

	c.JSON(consts.StatusOK, resp)
}

// ChooseSubmit .
// @router /choose [POST]
func ChooseSubmit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ChooseSubmitReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.ChooseSubmitResp)

	c.JSON(consts.StatusOK, resp)
}

// AddPrize .
// @router /prize [POST]
func AddPrize(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.PrizeInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// AddActivity .
// @router /activity [POST]
func AddActivity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.ActicityInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.BaseResp)

	c.JSON(consts.StatusOK, resp)
}
